/**
  *@fimame:生命游戏
  *@author: pursuit
  *@CSDNBlog:unique_pursuit
  *@email: 2825841950@qq.com
  *@created: 2021-04-02 10:36
**/
#include <bits/stdc++.h>

using namespace std;

typedef long long ll;
const int maxn = 100 + 5;
const int mod = 1e9+7;

//数据规模非常庞大，给出这道题其实就是让我们找规律判断。我们可以先打表0~100代的所有情况。
int go[][2]={{0,1},{0,-1},{1,0},{-1,0},{1,1},{1,-1},{-1,1},{-1,-1}};//移动方向。
//初始地图。根据题意我们去模拟。总共有39行。
string s[]={
".........................................................",
".........................................................",
".........................................................",
".........................................................",
".........................................................",
".........................................................",
".........................................................",
".........................................................",
".........................................................",
".........................................................",
"...................................X.....................",
".................................X.X.....................",
".......................XX......XX............XX..........",
"......................X...X....XX............XX..........",
"...........XX........X.....X...XX........................",
"...........XX........X...X.XX....X.X.....................",
".....................X.....X.......X.....................",
"......................X...X..............................",
".......................XX................................",
".........................................................",
".........................................................",
".........................................................",
".........................................................",
".........................................................",
".........................................................",
".........................................................",
".........................................................",
".........................................................",
".........................................................",
};
string pre_s[29];//用于更新。
void solve(){
    int t=0;
    int n=29,m=s[0].size();
    ofstream outFile;
    outFile.open("data.txt");
    while(t<=100){
        //outFile<<"*************"<<t<<"generation";
        int sum=0;//统计有多少细胞。
        for(int i=0;i<n;i++){
            pre_s[i]=s[i];
        }
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(s[i][j]=='X'){
                    sum++;
                }
            }
        }
        //outFile<<"*************total:"<<sum<<"cells"<<"*************\n";
        outFile<<sum;
        t%10?outFile<<" ":outFile<<endl;
        //接下来开始繁殖，即对每一个都进行判断统计周围的细胞数。
        t++;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                sum=0;
                //往周围的八个格子统计。
                for(int k=0;k<8;k++){
                    int tx=i+go[k][0],ty=j+go[k][1];
                    if(tx<0||tx>=n||ty<0||ty>=m)continue;
                    if(pre_s[tx][ty]=='X'){
                        sum++;
                    }
                }
                //统计好了就开始根据实际情况做出改变。
                if(pre_s[i][j]=='X'){
                    if(sum>3||sum<2){
                        //大于3个就变成死亡。
                        s[i][j]='.';
                    }
                }
                else{
                    if(sum==3){
                        //周围有3个，则存活
                        s[i][j]='X';
                    }
                }
            }
        }
    }
}
int main(){
    solve();//得到的结果就是每循环30代，就增加5个存活的，所以我们。
    //先确定余数根据余数确定七点。
    ll n=1e9;
    cout<<n%30<<endl;//余数为10，即第十代的初始数量，为48
    cout<<48+n/30*5<<endl;//166666713
    return 0;
}